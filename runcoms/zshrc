#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

export EDITOR=vim
export VISUAL=$EDITOR

# Support certificate signing
if [ -f "/etc/pki/tls/certs/ca-bundle.crt" ]; then
  export CURL_CA_BUNDLE="/etc/pki/tls/certs/ca-bundle.crt"
  alias brew="CURL_CA_BUNDLE='' brew" # brew might not work otherwise
fi

# nvm
if type brew >/dev/null && brew ls --versions nvm > /dev/null; then
  echo "[Init] nvm (brew)"
  export NVM_DIR="$HOME/.nvm"
  mkdir -p $NVM_DIR
  . "$(brew --prefix nvm)/nvm.sh"
elif [ -s $NVM_DIR/nvm.sh ]; then
  echo "[Init] nvm"
  export NVM_DIR="$HOME/.nvm"
  . "$NVM_DIR"/nvm.sh
fi

if type nvm >/dev/null; then
  # place this after nvm initialization!
  autoload -U add-zsh-hook
  load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
        nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
fi

# rbenv
if type rbenv >/dev/null ; then
  echo "[Init] rbenv"
  eval "$(rbenv init -)"
fi

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if type pyenv >/dev/null ; then
  echo "[Init] pyenv"
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
fi

# jabba
if [ -s "$HOME/.jabba/jabba.sh" ]; then
  echo "[Init] jabba"
  source "$HOME/.jabba/jabba.sh"
fi

# jenv
if type jenv >/dev/null ; then
  echo "[Init] jenv"
  export PATH="$HOME/.jenv/bin:$PATH"
  eval "$(jenv init -)"
fi

# postgres
if [ -d "/usr/local/opt/postgresql@9.6" ]; then
  export PATH="/usr/local/opt/postgresql@9.6/bin:$PATH"
fi

# brew keg-only packages
for pkg (openssl openblas lapack); do
  PREFIX="$(brew --prefix ${pkg})"
  export LDFLAGS="-L${PREFIX}/lib $LDFLAGS"
  export CPPFLAGS="-I${PREFIX}/include $CPPFLAGS"
  export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig:$PKG_CONFIG_PATH"
done

# gradle
alias gw="./gradlew"
alias gww="./gradleww"

# docker
alias dc="docker compose"

# local custom overrides
if [ -f "$HOME/.zprofile_local_only" ]; then
  echo "[Init] local zprofile"
  source "$HOME/.zprofile_local_only"
fi

# zsh
unsetopt share_history

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/freddie/git/AtomHan/nyc-taxi-data/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/freddie/git/AtomHan/nyc-taxi-data/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/freddie/git/AtomHan/nyc-taxi-data/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/freddie/git/AtomHan/nyc-taxi-data/google-cloud-sdk/completion.zsh.inc'; fi

compresspdf() {
    # Usage: compresspdf [input file] [output file] [screen*|ebook|printer|prepress]
    gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dPDFSETTINGS=/${3:-"screen"} -dCompatibilityLevel=1.4 -sOutputFile="$2" "$1"
}
